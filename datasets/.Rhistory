library(tidyverse)
library(qwraps2)
library(gridExtra)
library(stargazer)
library(ggplot2)
library(reshape2)a
library(psych)
library(readr)
library(sjPlot)
library(caret)
library(Hmisc)
library(nortest)
library(semPlot)
library(knitr)
require(gvlma)
library(haven)
library(trafo)
library(plm)
library(semTools)
setwd("C:/Documents/thesis/datasets")
SPI <- read.csv("./Spi.csv")
SPI$date <- as.Date(SPI$date)
SPI <- SPI %>% filter(date > "2018-07-01" & date < "2021-03-25")
SPI <- SPI %>% filter(league %in% c("Belgian Jupiler League", "Dutch Eredivisie", "French Ligue 1", "Turkish Turkcell Super Lig", "Barclays Premier League",
"Portuguese Liga", "Spanish Primera Division", "German Bundesliga", "Italy Serie A"))
colnames(SPI)[which(names(SPI) == "team1")] <- "HomeTeam"
colnames(SPI)[which(names(SPI) == "team2")] <- "AwayTeam"
SPI <- SPI[!is.na(SPI$score1),]
SPI <- SPI %>%
mutate(HomeTeam = str_replace_all(HomeTeam, "Sporting CP", "Sp Lisbon")) %>%
mutate(HomeTeam = str_replace_all(HomeTeam, "Sporting de Charleroi", "Charleroi" )) %>%
mutate(HomeTeam = str_replace_all(HomeTeam, "AZ", "AZ Alkmaar" )) %>%
mutate(HomeTeam = str_replace_all(HomeTeam, "PSV EIndhoven", "PSV Eindhoven" )) %>%
mutate(HomeTeam = str_replace_all(HomeTeam, "RKC", "Waalwijk" ) )%>%
mutate(HomeTeam = str_replace_all(HomeTeam, "NAC", "NAC Breda" )) %>%
mutate(HomeTeam = str_replace_all(HomeTeam, "Sparta", "Sparta Rotterdam")) %>%
mutate(HomeTeam = str_replace_all(HomeTeam, "Girona FC", "Girona"))
results18_19 <- read.csv("./2018/Results2018-19.csv")
results19_20 <- read.csv("./2019/Results2019-20.csv")
results20_21 <- read.csv("./2020/Results2020-21.csv")
moderator18_19 <- read.csv("./2018/transfermarkt3good.csv")
moderator19_20 <- read.csv("./2019/transfermarkt2good.csv")
moderator20_21 <- read.csv("./2020/transfermarktgood.csv")
moderator18_19 <-  moderator18_19[ , -which(names(moderator18_19) %in% c("season"))]
moderator19_20 <-  moderator19_20[ , -which(names(moderator19_20) %in% c("season"))]
moderator20_21 <-  moderator20_21[ , -which(names(moderator20_21) %in% c("season"))]
colnames(moderator18_19) <- c( "club", "avg_age_home", "players_used_home", "foreigners_home", "stadium_size", "avg_attendance", "occupancy", "covid", "covid_occupancy")
colnames(moderator19_20) <- c( "club", "avg_age_home", "players_used_home", "foreigners_home", "stadium_size", "avg_attendance", "occupancy", "covid", "covid_occupancy")
colnames(moderator20_21) <- c( "club", "avg_age_home", "players_used_home", "foreigners_home", "stadium_size", "avg_attendance", "occupancy", "covid", "covid_occupancy")
results19_20 <-  results19_20[ , -which(names(results19_20) %in% c("Time"))]
results20_21 <- results20_21[ , -which(names(results20_21) %in% c("Time"))]
results18_19 <- results18_19[1:22]
results19_20 <- results19_20[1:22]
results20_21 <- results20_21[1:22]
results18_19$club <- results18_19$HomeTeam
results19_20$club <- results19_20$HomeTeam
results20_21$club <- results20_21$HomeTeam
results18_19$club2 <- results18_19$AwayTeam
results19_20$club2 <- results19_20$AwayTeam
results20_21$club2 <- results20_21$AwayTeam
moderator18_19$club2 <- moderator18_19$club
moderator19_20$club2 <- moderator19_20$club
moderator20_21$club2 <- moderator20_21$club
merge18_19 <- left_join(results18_19, moderator18_19, by = "club")
merge19_20 <- left_join(results19_20, moderator19_20, by = "club")
merge20_21 <- left_join(results20_21, moderator20_21, by = "club")
merge18_19$club2 <- merge18_19$AwayTeam
merge19_20$club2 <- merge19_20$AwayTeam
merge20_21$club2 <- merge20_21$AwayTeam
merge18_19 <- left_join(merge18_19, moderator18_19, by = "club2")
merge19_20 <- left_join(merge19_20, moderator19_20, by = "club2")
merge20_21 <- left_join(merge20_21, moderator20_21, by = "club2")
df_results <- rbind(merge18_19, merge19_20, merge20_21)
SPI$Date <- SPI$date
SPI$Date <- as.Date(SPI$Date)
df_results$Date <- as.Date(df_results$Date, format = "%d/%m/%Y")
Full_dataset_alan <- left_join(df_results, SPI, by = c("Date", "HomeTeam"))
Full_dataset_alan <- Full_dataset_alan[ , -which(names(Full_dataset_alan) %in% c("Div", "HTR", "HTHG", "HTAG", "club.x","club2.x", "season.y", "covid.x","covid.y" ,"club.y","club2","AwayTeam.y" ,"club2.y", "club.y","covid_occupancy.y", "covid_occupancy.x", "date", "date.y", "league_id", "AwayTeam.y", "score1", "score2", "stadium_size.y", "occupancy.y", "avg_attendance.y"))]
names(Full_dataset_alan)[names(Full_dataset_alan) == 'avg_age_home.x'] <- 'avg_age_home'
names(Full_dataset_alan)[names(Full_dataset_alan) == 'avg_age_home.y'] <- 'avg_age_away'
names(Full_dataset_alan)[names(Full_dataset_alan) == 'players_used_home.x'] <- 'players_used_home'
names(Full_dataset_alan)[names(Full_dataset_alan) == 'players_used_home.y'] <- 'players_used_away'
names(Full_dataset_alan)[names(Full_dataset_alan) == 'AwayTeam.x'] <- 'AwayTeam'
names(Full_dataset_alan)[names(Full_dataset_alan) == 'foreigners_home.x'] <- 'foreigners_home'
names(Full_dataset_alan)[names(Full_dataset_alan) == 'foreigners_home.y'] <- 'foreigners_away'
names(Full_dataset_alan)[names(Full_dataset_alan) == 'avg_attendance.x'] <- 'avg_attendance'
names(Full_dataset_alan)[names(Full_dataset_alan) == 'stadium_size.x'] <- 'stadium_size'
names(Full_dataset_alan)[names(Full_dataset_alan) == 'occupancy.x'] <- 'occupancy'
full_dataset_alan <- Full_dataset_alan %>% mutate(yel_card_spread = AY - HY, rating_diff = spi1-spi2, xg_diff = xg1 - xg2, age_diff = avg_age_home - avg_age_away, red_card_spread = AR - HR, importance_diff = importance1 - importance2  )
full_dataset_alan <- full_dataset_alan %>% mutate(covid = ifelse(Date > "2020-04-01", 1, 0))
full_dataset_alan <- full_dataset_alan %>% mutate(crowdsupport = ifelse(Date < "2020-04-01", 1, 0))
full_dataset_alan <- full_dataset_alan %>% mutate(home_win = ifelse(FTHG > FTAG, 1, 0))
full_dataset_alan <- full_dataset_alan %>% mutate(away_win = ifelse(FTHG < FTAG, 1, 0))
full_dataset_alan <- full_dataset_alan %>% mutate(draw = ifelse(FTHG == FTAG, 1, 0))
full_dataset_alan <- full_dataset_alan %>% mutate(home_points = ifelse(FTHG > FTAG, 3, ifelse(FTHG < FTAG, 0, 1)))
full_dataset_alan <- full_dataset_alan %>% mutate(away_points = ifelse(FTHG < FTAG, 3, ifelse(FTHG > FTAG, 0, 1)))
full_dataset_alan <- full_dataset_alan %>% mutate(yel_card_ratio_home = HY/HF)
full_dataset_alan <- full_dataset_alan %>% mutate(red_card_ratio_home = HY/HF)
full_dataset_alan <- full_dataset_alan %>% mutate(yel_card_ratio_away = AY/AF)
full_dataset_alan <- full_dataset_alan %>% mutate(red_card_ratio_away = AR/AF)
full_dataset_alan <- full_dataset_alan %>% mutate(shots_ratio_home = HST/HS)
full_dataset_alan <- full_dataset_alan %>% mutate(shots_ratio_away = AST/AS)
full_dataset_alan <- full_dataset_alan %>% mutate(goal_diff = FTHG - FTAG)
full_dataset_alan <- full_dataset_alan %>% mutate(diff_point = home_points - away_points)
full_dataset_alan <- full_dataset_alan %>% mutate(foul_spread = AF - HF)
full_dataset_alan <- full_dataset_alan %>% mutate(foreigners_spread = foreigners_home - foreigners_away)
full_dataset_alan <- full_dataset_alan %>% mutate(percentage_points_home = home_points / (home_points + away_points))
full_dataset_alan <- full_dataset_alan %>% mutate(percentage_points_away = away_points / (away_points + home_points))
full_dataset_alan <- full_dataset_alan %>% mutate(Result = ifelse(FTHG > FTAG, "homewin", ifelse(FTHG < FTAG, "awaywin","draw")))
full_dataset_alan <-  full_dataset_alan[ , -which(names(full_dataset_alan) %in% c("FTR", "players_used_home", "players_used_away", "prob1", "prob2", "probtie", "proj_score1", "proj_score2", "nsxg1", "nsxg2", "adj_score1", "adj_score2", "home_points_percentage_total", "away_points_percentage_total"))]
full_dataset_alan <- full_dataset_alan %>% mutate(crowdsize = ifelse(avg_attendance < 20000, "small", ifelse(avg_attendance > 20000 & avg_attendance < 40000, "medium", "large")))
full_dataset_alan <- full_dataset_alan %>% mutate(crowd = ifelse(avg_attendance < 10000, "extrasmall", ifelse(avg_attendance > 10000 & avg_attendance < 20000, "small", ifelse(avg_attendance > 30000 & avg_attendance < 40000,"medium", ifelse(avg_attendance > 40000 & avg_attendance < 50000, "big", "large")))))
full_dataset_alan <- full_dataset_alan %>% mutate(var = ifelse(season == 2018 & (league == "Barclays Premier League" | league == "Portuguese Liga"),0, 1))
full_dataset_alan <- full_dataset_alan %>% mutate(CornerDifference = HC - AC)
full_dataset_alan <- full_dataset_alan %>% mutate(ShotsDifference = HS - AC)
full_dataset_alan <- full_dataset_alan %>% mutate(ShotsTargetDifference = HST - AST)
full_dataset_alan <- full_dataset_alan %>% mutate(PercentagePointsDifference = percentage_points_home - percentage_points_away)
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='yel_card_spread')] <- 'YellowCardDifference'
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='red_card_spread')] <- 'RedCardDifference'
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='foul_spread')] <- 'FoulDifference'
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='age_diff')] <- 'AgeDifference'
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='xg_diff')] <- 'ExpectedGoalsDifference'
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='importance_diff')] <- 'ImportanceDifference'
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='rating_diff')] <- 'RatingDifference'
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='var')] <- 'VAR'
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='occupancy')] <- 'OccupancyRate'
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='goal_diff')] <- 'GoalDifference'
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='percentage_points_home')] <- 'PercentagePointsHome'
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='foreigners_spread')] <- 'ForeignersShareDifference'
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='crowdsize')] <- 'Crowdsize'
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='avg_attendance')] <- 'AverageAttendance'
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='diff_point')] <- 'PointsDifference'
full_dataset_alan$AverageAttendance <- as.numeric(full_dataset_alan$AverageAttendance)
as.numeric(gsub(",","",full_dataset_alan$AverageAttendance,fixed=TRUE))
full_dataset_alan <- full_dataset_alan %>% mutate(AverageAttendance = AverageAttendance/1000)
set.seed(1234)
model_variables <- full_dataset_alan[ , which(names(full_dataset_alan) %in%  c("crowdsupport","league", "ShotsDifference", "PointsDifference","league","CornerDifference","ShotsTargetDifference","ShotsDifference","AverageAttendance","GoalDifference","covid","VAR","RatingDifference","ImportanceDifference","AgeDifference", "ForeignersShareDifference", "OccupancyRate","YellowCardDifference", "RedCardDifference", "FoulDifference", "PercentagePointsHome"))]
model_variables <- model_variables[complete.cases(model_variables), ]
model_variables$ForeignersShareDifference <- scale(model_variables$ForeignersShareDifference, center = TRUE, scale = TRUE)[,] #Scale returns a matrix so we have to make it a vector by indexing one column
model_variables$AverageAttendance <- scale(model_variables$AverageAttendance, center = TRUE, scale = TRUE)[,]
model_variables$AgeDifference <- scale(model_variables$AgeDifference, center = TRUE, scale = TRUE)[,]
model_variables$OccupancyRate <- scale(model_variables$OccupancyRate, center = TRUE, scale = TRUE)[,]
model_variables$league <- as.numeric(factor(model_variables$league))
modelcrowd <- 'Refereebias =~   FoulDifference + YellowCardDifference
Refereebias ~~ Refereebias
FoulDifference ~~ FoulDifference
YellowCardDifference ~~ YellowCardDifference
Refereebias ~ a*crowdsupport + a2* OccupancyRate + a3*OccupancyRate:covid + a4 * AverageAttendance + a5 * ForeignersShareDifference + a6 * AverageAttendance:covid + a7 * ForeignersShareDifference:covid +  d1 * RatingDifference + d2 * ImportanceDifference + d3 * ShotsDifference +  d4* VAR  + d6* as.factor(league)
GoalDifference ~ cp * crowdsupport + b* Refereebias + b2 * OccupancyRate + b3* OccupancyRate:covid + b4 * AverageAttendance + b5 * ForeignersShareDifference + b6 * AverageAttendance:covid + b7 * ForeignersShareDifference:covid + b8 * AgeDifference + b9 * AgeDifference:covid + d1 * RatingDifference + d2 * ImportanceDifference  + d4* VAR + d6* as.factor(league)
Direct := cp
indirect := a*b
moderated mediation effect occupancy:= (a3 * b)
moderated effect occupancy := b3
total effect occupancy := (a3 * b)  + b3
moderated mediation effect attendance:= (a6 * b)
moderated effect attendance :=  b6
total effect attendance := (a6 * b) + b6
moderated mediation effect foreigners share := (a7 * b)
moderated effect foreigners share := b7
total effect foreigners share := (a7 * b) + b7
moderated effect Age := b9
total := cp + (a*b)  +  (a7 * b) + b7 + (a6 * b) + b6 + (a3 * b)  + b3 + b9
confounder Rating  := d1
confounder Importance := d2
confounder Shots := d3
counfounder Var := d4
confounder league := d6'
fitmodelcrowd <- sem(modelcrowd ,data = model_variables, se = "bootstrap", bootstrap = 100)
modelcrowd <- 'Refereebias =~   FoulDifference + YellowCardDifference
Refereebias ~~ Refereebias
FoulDifference ~~ FoulDifference
YellowCardDifference ~~ YellowCardDifference
Refereebias ~ a*crowdsupport + a2* OccupancyRate + a3*OccupancyRate:crowdsupport + a4 * AverageAttendance + a5 * ForeignersShareDifference + a6 * AverageAttendance:crowdsupport + a7 * ForeignersShareDifference:crowdsupport +  d1 * RatingDifference + d2 * ImportanceDifference + d3 * ShotsDifference +  d4* VAR  + d6* as.factor(league)
GoalDifference ~ cp * crowdsupport + b* Refereebias + b2 * OccupancyRate + b3* OccupancyRate:crowdsupport + b4 * AverageAttendance + b5 * ForeignersShareDifference + b6 * AverageAttendance:crowdsupport + b7 * ForeignersShareDifference:crowdsupport + b8 * AgeDifference + b9 * AgeDifference:crowdsupport + d1 * RatingDifference + d2 * ImportanceDifference  + d4* VAR + d6* as.factor(league)
Direct := cp
indirect := a*b
moderated mediation effect occupancy:= (a3 * b)
moderated effect occupancy := b3
total effect occupancy := (a3 * b)  + b3
moderated mediation effect attendance:= (a6 * b)
moderated effect attendance :=  b6
total effect attendance := (a6 * b) + b6
moderated mediation effect foreigners share := (a7 * b)
moderated effect foreigners share := b7
total effect foreigners share := (a7 * b) + b7
moderated effect Age := b9
total := cp + (a*b)  +  (a7 * b) + b7 + (a6 * b) + b6 + (a3 * b)  + b3 + b9
confounder Rating  := d1
confounder Importance := d2
confounder Shots := d3
counfounder Var := d4
confounder league := d6'
fitmodelcrowd <- sem(modelcrowd ,data = model_variables, se = "bootstrap", bootstrap = 100)
summary(fitmodelcrowd, fit.measures = T, standardized = T, rsquare = T)
modelcrowd <- 'Refereebias =~   FoulDifference + YellowCardDifference
Refereebias ~~ Refereebias
FoulDifference ~~ FoulDifference
YellowCardDifference ~~ YellowCardDifference
Refereebias ~ a*crowdsupport + a2* OccupancyRate + a3*OccupancyRate:crowdsupport + a4 * AverageAttendance + a5 * ForeignersShareDifference + a6 * AverageAttendance:crowdsupport + a7 * ForeignersShareDifference:crowdsupport +  d1 * RatingDifference + d2 * ImportanceDifference + d3 * ShotsDifference +  d4* VAR  + d6* as.factor(league)
GoalDifference ~ cp * crowdsupport + b* Refereebias + b2 * OccupancyRate + b3* OccupancyRate:crowdsupport + b4 * AverageAttendance + b5 * ForeignersShareDifference + b6 * AverageAttendance:crowdsupport + b7 * ForeignersShareDifference:crowdsupport + b8 * AgeDifference + b9 * AgeDifference:crowdsupport + d1 * RatingDifference + d2 * ImportanceDifference  + d4* VAR + d6* as.factor(league)
Direct := cp
indirect := a*b
SD.below := (cp + (a*b)  +  (a7 * b) + b7 + (a6 * b) + b6 + (a3 * b)  + b9 )+ b3*OccupancyRate.mean +b3*(OccupancyRate.mean + sqrt(OccupancyRate.var))+ b3*(OccupancyRate.mean - sqrt(OccupancyRate.var))
mean := (cp + (a*b)  +  (a7 * b) + b7 + (a6 * b) + b6 + (a3 * b)  + b9 ) + b3*OccupancyRate.mean +b3*(OccupancyRate.mean + sqrt(OccupancyRate.var))
SD.above := (cp + (a*b)  +  (a7 * b) + b7 + (a6 * b) + b6 + (a3 * b)  + b9 ) + (2* b3*(OccupancyRate.mean + sqrt(OccupancyRate.var)))
moderated mediation effect occupancy:= (a3 * b)
moderated effect occupancy := b3
total effect occupancy := (a3 * b)  + b3
moderated mediation effect attendance:= (a6 * b)
moderated effect attendance :=  b6
total effect attendance := (a6 * b) + b6
moderated mediation effect foreigners share := (a7 * b)
moderated effect foreigners share := b7
total effect foreigners share := (a7 * b) + b7
moderated effect Age := b9
total := cp + (a*b)  +  (a7 * b) + b7 + (a6 * b) + b6 + (a3 * b)  + b3 + b9
confounder Rating  := d1
confounder Importance := d2
confounder Shots := d3
counfounder Var := d4
confounder league := d6'
fitmodelcrowd <- sem(modelcrowd ,data = model_variables, se = "bootstrap", bootstrap = 100)
modelcrowd <- 'Refereebias =~   FoulDifference + YellowCardDifference
Refereebias ~~ Refereebias
FoulDifference ~~ FoulDifference
YellowCardDifference ~~ YellowCardDifference
OccupancyRate ~ OccupancyRate.mean*1 + OccupancyRate
# variance of centered occupancy (moderator; for use in simple slopes)
OccupancyRate ~~ OccupancyRate.var*OccupancyRate
Refereebias ~ a*crowdsupport + a2* OccupancyRate + a3*OccupancyRate:crowdsupport + a4 * AverageAttendance + a5 * ForeignersShareDifference + a6 * AverageAttendance:crowdsupport + a7 * ForeignersShareDifference:crowdsupport +  d1 * RatingDifference + d2 * ImportanceDifference + d3 * ShotsDifference +  d4* VAR  + d6* as.factor(league)
GoalDifference ~ cp * crowdsupport + b* Refereebias + b2 * OccupancyRate + b3* OccupancyRate:crowdsupport + b4 * AverageAttendance + b5 * ForeignersShareDifference + b6 * AverageAttendance:crowdsupport + b7 * ForeignersShareDifference:crowdsupport + b8 * AgeDifference + b9 * AgeDifference:crowdsupport + d1 * RatingDifference + d2 * ImportanceDifference  + d4* VAR + d6* as.factor(league)
Direct := cp
indirect := a*b
SD.below := (cp + (a*b)  +  (a7 * b) + b7 + (a6 * b) + b6 + (a3 * b)  + b9 )+ b3*OccupancyRate.mean +b3*(OccupancyRate.mean + sqrt(OccupancyRate.var))+ b3*(OccupancyRate.mean - sqrt(OccupancyRate.var))
mean := (cp + (a*b)  +  (a7 * b) + b7 + (a6 * b) + b6 + (a3 * b)  + b9 ) + b3*OccupancyRate.mean +b3*(OccupancyRate.mean + sqrt(OccupancyRate.var))
SD.above := (cp + (a*b)  +  (a7 * b) + b7 + (a6 * b) + b6 + (a3 * b)  + b9 ) + (2* b3*(OccupancyRate.mean + sqrt(OccupancyRate.var)))
moderated mediation effect occupancy:= (a3 * b)
moderated effect occupancy := b3
total effect occupancy := (a3 * b)  + b3
moderated mediation effect attendance:= (a6 * b)
moderated effect attendance :=  b6
total effect attendance := (a6 * b) + b6
moderated mediation effect foreigners share := (a7 * b)
moderated effect foreigners share := b7
total effect foreigners share := (a7 * b) + b7
moderated effect Age := b9
total := cp + (a*b)  +  (a7 * b) + b7 + (a6 * b) + b6 + (a3 * b)  + b3 + b9
confounder Rating  := d1
confounder Importance := d2
confounder Shots := d3
counfounder Var := d4
confounder league := d6'
fitmodelcrowd <- sem(modelcrowd ,data = model_variables, se = "bootstrap", bootstrap = 100)
summary(fitmodelcrowd, fit.measures = T, standardized = T, rsquare = T)
fitmodelcrowd <- sem(modelcrowd ,data = model_variables, se = "bootstrap", bootstrap = 100)
stargazer(full_dataset_alan,
type = "html",
median = TRUE,
title = "Descriptive Statistics",
#order=c("PercentagePointsHome", "ExpectedGoalsDifference", "GoalDifference", "ForeignersShareDifference", "AgeDifference", "OccupancyRate", "AverageAttendance", "YellowCardDifference", "FoulDifference", "RedCardDifference", "RatingDifference", "ImportanceDifference"),
out="full_descriptives.html")
set.seed(1234)
library(asht)
library(rockchalk)
library(pander)
library(compare)
library(WMWssp)
library(lmtest)
library(lavaan)
library(ggpubr)
library(stringr)
library(plyr)
library(dplyr)
library(lubridate)
library(tidyr)
library(stringr)
library(tidyverse)
library(qwraps2)
library(gridExtra)
library(stargazer)
library(ggplot2)
library(reshape2)a
library(psych)
library(readr)
library(sjPlot)
library(caret)
library(Hmisc)
library(nortest)
library(semPlot)
library(knitr)
require(gvlma)
library(haven)
library(trafo)
library(plm)
library(semTools)
setwd("C:/Documents/thesis/datasets")
SPI <- read.csv("./Spi.csv")
SPI$date <- as.Date(SPI$date)
SPI <- SPI %>% filter(date > "2018-07-01" & date < "2021-03-25")
SPI <- SPI %>% filter(league %in% c("Belgian Jupiler League", "Dutch Eredivisie", "French Ligue 1", "Turkish Turkcell Super Lig", "Barclays Premier League",
"Portuguese Liga", "Spanish Primera Division", "German Bundesliga", "Italy Serie A"))
colnames(SPI)[which(names(SPI) == "team1")] <- "HomeTeam"
colnames(SPI)[which(names(SPI) == "team2")] <- "AwayTeam"
SPI <- SPI[!is.na(SPI$score1),]
SPI <- SPI %>%
mutate(HomeTeam = str_replace_all(HomeTeam, "Sporting CP", "Sp Lisbon")) %>%
mutate(HomeTeam = str_replace_all(HomeTeam, "Sporting de Charleroi", "Charleroi" )) %>%
mutate(HomeTeam = str_replace_all(HomeTeam, "AZ", "AZ Alkmaar" )) %>%
mutate(HomeTeam = str_replace_all(HomeTeam, "PSV EIndhoven", "PSV Eindhoven" )) %>%
mutate(HomeTeam = str_replace_all(HomeTeam, "RKC", "Waalwijk" ) )%>%
mutate(HomeTeam = str_replace_all(HomeTeam, "NAC", "NAC Breda" )) %>%
mutate(HomeTeam = str_replace_all(HomeTeam, "Sparta", "Sparta Rotterdam")) %>%
mutate(HomeTeam = str_replace_all(HomeTeam, "Girona FC", "Girona"))
results18_19 <- read.csv("./2018/Results2018-19.csv")
results19_20 <- read.csv("./2019/Results2019-20.csv")
results20_21 <- read.csv("./2020/Results2020-21.csv")
moderator18_19 <- read.csv("./2018/transfermarkt3good.csv")
moderator19_20 <- read.csv("./2019/transfermarkt2good.csv")
moderator20_21 <- read.csv("./2020/transfermarktgood.csv")
moderator18_19 <-  moderator18_19[ , -which(names(moderator18_19) %in% c("season"))]
moderator19_20 <-  moderator19_20[ , -which(names(moderator19_20) %in% c("season"))]
moderator20_21 <-  moderator20_21[ , -which(names(moderator20_21) %in% c("season"))]
colnames(moderator18_19) <- c( "club", "avg_age_home", "players_used_home", "foreigners_home", "stadium_size", "avg_attendance", "occupancy", "covid", "covid_occupancy")
colnames(moderator19_20) <- c( "club", "avg_age_home", "players_used_home", "foreigners_home", "stadium_size", "avg_attendance", "occupancy", "covid", "covid_occupancy")
colnames(moderator20_21) <- c( "club", "avg_age_home", "players_used_home", "foreigners_home", "stadium_size", "avg_attendance", "occupancy", "covid", "covid_occupancy")
results19_20 <-  results19_20[ , -which(names(results19_20) %in% c("Time"))]
results20_21 <- results20_21[ , -which(names(results20_21) %in% c("Time"))]
results18_19 <- results18_19[1:22]
results19_20 <- results19_20[1:22]
results20_21 <- results20_21[1:22]
results18_19$club <- results18_19$HomeTeam
results19_20$club <- results19_20$HomeTeam
results20_21$club <- results20_21$HomeTeam
results18_19$club2 <- results18_19$AwayTeam
results19_20$club2 <- results19_20$AwayTeam
results20_21$club2 <- results20_21$AwayTeam
moderator18_19$club2 <- moderator18_19$club
moderator19_20$club2 <- moderator19_20$club
moderator20_21$club2 <- moderator20_21$club
merge18_19 <- left_join(results18_19, moderator18_19, by = "club")
merge19_20 <- left_join(results19_20, moderator19_20, by = "club")
merge20_21 <- left_join(results20_21, moderator20_21, by = "club")
merge18_19$club2 <- merge18_19$AwayTeam
merge19_20$club2 <- merge19_20$AwayTeam
merge20_21$club2 <- merge20_21$AwayTeam
merge18_19 <- left_join(merge18_19, moderator18_19, by = "club2")
merge19_20 <- left_join(merge19_20, moderator19_20, by = "club2")
merge20_21 <- left_join(merge20_21, moderator20_21, by = "club2")
df_results <- rbind(merge18_19, merge19_20, merge20_21)
SPI$Date <- SPI$date
SPI$Date <- as.Date(SPI$Date)
df_results$Date <- as.Date(df_results$Date, format = "%d/%m/%Y")
Full_dataset_alan <- left_join(df_results, SPI, by = c("Date", "HomeTeam"))
Full_dataset_alan <- Full_dataset_alan[ , -which(names(Full_dataset_alan) %in% c("Div", "HTR", "HTHG", "HTAG", "club.x","club2.x", "season.y", "covid.x","covid.y" ,"club.y","club2","AwayTeam.y" ,"club2.y", "club.y","covid_occupancy.y", "covid_occupancy.x", "date", "date.y", "league_id", "AwayTeam.y", "score1", "score2", "stadium_size.y", "occupancy.y", "avg_attendance.y"))]
names(Full_dataset_alan)[names(Full_dataset_alan) == 'avg_age_home.x'] <- 'avg_age_home'
names(Full_dataset_alan)[names(Full_dataset_alan) == 'avg_age_home.y'] <- 'avg_age_away'
names(Full_dataset_alan)[names(Full_dataset_alan) == 'players_used_home.x'] <- 'players_used_home'
names(Full_dataset_alan)[names(Full_dataset_alan) == 'players_used_home.y'] <- 'players_used_away'
names(Full_dataset_alan)[names(Full_dataset_alan) == 'AwayTeam.x'] <- 'AwayTeam'
names(Full_dataset_alan)[names(Full_dataset_alan) == 'foreigners_home.x'] <- 'foreigners_home'
names(Full_dataset_alan)[names(Full_dataset_alan) == 'foreigners_home.y'] <- 'foreigners_away'
names(Full_dataset_alan)[names(Full_dataset_alan) == 'avg_attendance.x'] <- 'avg_attendance'
names(Full_dataset_alan)[names(Full_dataset_alan) == 'stadium_size.x'] <- 'stadium_size'
names(Full_dataset_alan)[names(Full_dataset_alan) == 'occupancy.x'] <- 'occupancy'
full_dataset_alan <- Full_dataset_alan %>% mutate(yel_card_spread = AY - HY, rating_diff = spi1-spi2, xg_diff = xg1 - xg2, age_diff = avg_age_home - avg_age_away, red_card_spread = AR - HR, importance_diff = importance1 - importance2  )
full_dataset_alan <- full_dataset_alan %>% mutate(covid = ifelse(Date > "2020-04-01", 1, 0))
full_dataset_alan <- full_dataset_alan %>% mutate(home_win = ifelse(FTHG > FTAG, 1, 0))
full_dataset_alan <- full_dataset_alan %>% mutate(away_win = ifelse(FTHG < FTAG, 1, 0))
full_dataset_alan <- full_dataset_alan %>% mutate(draw = ifelse(FTHG == FTAG, 1, 0))
full_dataset_alan <- full_dataset_alan %>% mutate(home_points = ifelse(FTHG > FTAG, 3, ifelse(FTHG < FTAG, 0, 1)))
full_dataset_alan <- full_dataset_alan %>% mutate(away_points = ifelse(FTHG < FTAG, 3, ifelse(FTHG > FTAG, 0, 1)))
full_dataset_alan <- full_dataset_alan %>% mutate(yel_card_ratio_home = HY/HF)
full_dataset_alan <- full_dataset_alan %>% mutate(red_card_ratio_home = HR/HF)
full_dataset_alan <- full_dataset_alan %>% mutate(yel_card_ratio_away = AY/AF)
full_dataset_alan <- full_dataset_alan %>% mutate(red_card_ratio_away = AR/AF)
full_dataset_alan <- full_dataset_alan %>% mutate(shots_ratio_home = HST/HS)
full_dataset_alan <- full_dataset_alan %>% mutate(shots_ratio_away = AST/AS)
full_dataset_alan <- full_dataset_alan %>% mutate(goal_diff = FTHG - FTAG)
full_dataset_alan <- full_dataset_alan %>% mutate(diff_point = home_points - away_points)
full_dataset_alan <- full_dataset_alan %>% mutate(foul_spread = AF - HF)
full_dataset_alan <- full_dataset_alan %>% mutate(foreigners_spread = foreigners_home - foreigners_away)
full_dataset_alan <- full_dataset_alan %>% mutate(percentage_points_home = home_points / (home_points + away_points))
full_dataset_alan <- full_dataset_alan %>% mutate(percentage_points_away = away_points / (away_points + home_points))
full_dataset_alan <- full_dataset_alan %>% mutate(Result = ifelse(FTHG > FTAG, "homewin", ifelse(FTHG < FTAG, "awaywin","draw")))
full_dataset_alan <-  full_dataset_alan[ , -which(names(full_dataset_alan) %in% c("FTR", "players_used_home", "players_used_away", "prob1", "prob2", "probtie", "proj_score1", "proj_score2", "nsxg1", "nsxg2", "adj_score1", "adj_score2", "home_points_percentage_total", "away_points_percentage_total"))]
full_dataset_alan <- full_dataset_alan %>% mutate(crowdsize = ifelse(avg_attendance < 20000, "small", ifelse(avg_attendance > 20000 & avg_attendance < 40000, "medium", "large")))
full_dataset_alan <- full_dataset_alan %>% mutate(crowd = ifelse(avg_attendance < 10000, "extrasmall", ifelse(avg_attendance > 10000 & avg_attendance < 20000, "small", ifelse(avg_attendance > 30000 & avg_attendance < 40000,"medium", ifelse(avg_attendance > 40000 & avg_attendance < 50000, "big", "large")))))
full_dataset_alan <- full_dataset_alan %>% mutate(var = ifelse(season == 2018 & (league == "Barclays Premier League" | league == "Portuguese Liga"),0, 1))
full_dataset_alan <- full_dataset_alan %>% mutate(CornerDifference = HC - AC)
full_dataset_alan <- full_dataset_alan %>% mutate(ShotsDifference = HS - AC)
full_dataset_alan <- full_dataset_alan %>% mutate(ShotsTargetDifference = HST - AST)
full_dataset_alan <- full_dataset_alan %>% mutate(PercentagePointsDifference = percentage_points_home - percentage_points_away)
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='yel_card_spread')] <- 'YellowCardDifference'
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='red_card_spread')] <- 'RedCardDifference'
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='foul_spread')] <- 'FoulDifference'
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='age_diff')] <- 'AgeDifference'
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='xg_diff')] <- 'ExpectedGoalsDifference'
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='importance_diff')] <- 'ImportanceDifference'
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='rating_diff')] <- 'RatingDifference'
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='var')] <- 'VAR'
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='occupancy')] <- 'OccupancyRate'
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='goal_diff')] <- 'GoalDifference'
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='percentage_points_home')] <- 'PercentagePointsHome'
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='foreigners_spread')] <- 'ForeignersShareDifference'
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='crowdsize')] <- 'Crowdsize'
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='avg_attendance')] <- 'AverageAttendance'
colnames(full_dataset_alan)[which(colnames(full_dataset_alan)=='diff_point')] <- 'PointsDifference'
full_dataset_alan$AverageAttendance <- as.numeric(full_dataset_alan$AverageAttendance)
as.numeric(gsub(",","",full_dataset_alan$AverageAttendance,fixed=TRUE))
full_dataset_alan <- full_dataset_alan %>% mutate(AverageAttendance = AverageAttendance/1000)
stargazer(full_dataset_alan,
type = "html",
median = TRUE,
title = "Descriptive Statistics",
#order=c("PercentagePointsHome", "ExpectedGoalsDifference", "GoalDifference", "ForeignersShareDifference", "AgeDifference", "OccupancyRate", "AverageAttendance", "YellowCardDifference", "FoulDifference", "RedCardDifference", "RatingDifference", "ImportanceDifference"),
out="full_descriptives.html")
ncvTest(path)
#assumptions2 <- pander()
library(car)
path <- lm(GoalDifference ~ FoulDifference +covid +AverageAttendance + OccupancyRate  + covid*AverageAttendance +ForeignersShareDifference + AgeDifference + covid*OccupancyRate +  + covid*AgeDifference + covid*ForeignersShareDifference + ImportanceDifference + RatingDifference + VAR , data = model_variables)
apath <- lm(FoulDifference ~ covid  + OccupancyRate + AverageAttendance +ForeignersShareDifference + covid*AverageAttendance +covid*OccupancyRate + covid*ForeignersShareDifference + RatingDifference + ImportanceDifference + VAR, data = model_variables)
leveneTest(apath)
set.seed(1234)
model_variables <- full_dataset_alan[ , which(names(full_dataset_alan) %in%  c("league", "ShotsDifference", "PointsDifference","league","CornerDifference","ShotsTargetDifference","ShotsDifference","AverageAttendance","GoalDifference","covid","VAR","RatingDifference","ImportanceDifference","AgeDifference", "ForeignersShareDifference", "OccupancyRate","YellowCardDifference", "RedCardDifference", "FoulDifference", "PercentagePointsHome"))]
model_variables <- model_variables[complete.cases(model_variables), ]
model_variables$ForeignersShareDifference <- scale(model_variables$ForeignersShareDifference, center = TRUE, scale = TRUE)[,] #Scale returns a matrix so we have to make it a vector by indexing one column
model_variables$AverageAttendance <- scale(model_variables$AverageAttendance, center = TRUE, scale = TRUE)[,]
model_variables$AgeDifference <- scale(model_variables$AgeDifference, center = TRUE, scale = TRUE)[,]
model_variables$OccupancyRate <- scale(model_variables$OccupancyRate, center = TRUE, scale = TRUE)[,]
model_variables$league <- as.numeric(factor(model_variables$league))
path <- lm(GoalDifference ~ FoulDifference +covid +AverageAttendance + OccupancyRate  + covid*AverageAttendance +ForeignersShareDifference + AgeDifference + covid*OccupancyRate +  + covid*AgeDifference + covid*ForeignersShareDifference + ImportanceDifference + RatingDifference + VAR , data = model_variables)
apath <- lm(FoulDifference ~ covid  + OccupancyRate + AverageAttendance +ForeignersShareDifference + covid*AverageAttendance +covid*OccupancyRate + covid*ForeignersShareDifference + RatingDifference + ImportanceDifference + VAR, data = model_variables)
bptest(apath)
leveneTest(apath)
ncvTest(path)
ncvTest(apath)
vif(path)
vif(apath)
shapiro.test(covid_data$HST)
covid_data <- full_dataset_alan %>% filter(covid == 1)
non_covid_data <- full_dataset_alan %>% filter(covid != 1)
shapiro.test(covid_data$HST)
x13 <-wilcox.test(covid_data$xg1, non_covid_data$xg1)
x13
XD <- wmwTest(covid_data$FTHG, non_covid_data$xg1, alternative = c("two.sided", "less", "greater"))
x<- pander(XD)
XD <- wmwTest(covid_data$FTHG, covid_data$xg1, alternative = c("two.sided", "less", "greater"))
x<- pander(XD)
XD <- wmwTest(non_covid_data$FTHG, covid_data$xg1, alternative = c("two.sided", "less", "greater"))
x<- pander(XD)
XD <- wmwTest(non_covid_data$FTHG, non_covid_data$xg1, alternative = c("two.sided", "less", "greater"))
x<- pander(XD)
H <- wmwTest(covid_data$xg1, non_covid_data$xg2, alternative = c("two.sided", "less", "greater"))
XD <- wmwTest(non_covid_data$xg2, non_covid_data$xg1, alternative = c("two.sided", "less", "greater"))
x<- pander(XD)
XD <- wmwTest(covid_data$xg2, covid_data$xg1, alternative = c("two.sided", "less", "greater"))
x<- pander(XD)
M <- wmwTest(covid_data$YellowCardDifference, non_covid_data$YellowCardDifference, alternative = c("two.sided", "less", "greater"))
N <- wmwTest(covid_data$RedCardDifference, non_covid_data$RedCardDifference, alternative = c("two.sided", "less", "greater"))
O <- wmwTest(covid_data$ExpectedGoalsDifference, non_covid_data$ExpectedGoalsDifference, alternative = c("two.sided", "less", "greater"))
P <- wmwTest(covid_data$FoulDifference, non_covid_data$FoulDifference, alternative = c("two.sided", "less", "greater"))
Q <- wmwTest(covid_data$GoalDifference, non_covid_data$GoalDifference, alternative = c("two.sided", "less", "greater"))
R <- wmwTest(covid_data$PercentagePointsHome, non_covid_data$PercentagePointsHome, alternative = c("two.sided", "less", "greater"))
S <- wmwTest(covid_data$HY, non_covid_data$HY, alternative = c("two.sided", "less", "greater"))
t <- wmwTest(covid_data$AY, non_covid_data$AY, alternative = c("two.sided", "less", "greater"))
U <- wmwTest(covid_data$HR, non_covid_data$HR, alternative = c("two.sided", "less", "greater"))
V <- wmwTest(covid_data$AR, non_covid_data$AR, alternative = c("two.sided", "less", "greater"))
W <- wmwTest(covid_data$AF, non_covid_data$AF, alternative = c("two.sided", "less", "greater"))
X <- wmwTest(covid_data$HF, non_covid_data$HF, alternative = c("two.sided", "less", "greater"))
Y <- wmwTest(covid_data$FTHG, non_covid_data$FTHG, alternative = c("two.sided", "less", "greater"))
Z <- wmwTest(covid_data$FTAG, non_covid_data$FTAG, alternative = c("two.sided", "less", "greater"))
A <- wmwTest(covid_data$home_points, non_covid_data$home_points, alternative = c("two.sided", "less", "greater"))
B <- wmwTest(covid_data$away_points, non_covid_data$away_points, alternative = c("two.sided", "less", "greater"))
C <- wmwTest(covid_data$HS, non_covid_data$HS, alternative = c("two.sided", "less", "greater"))
D <- wmwTest(covid_data$AS, non_covid_data$AS, alternative = c("two.sided", "less", "greater"))
E <- wmwTest(covid_data$HST, non_covid_data$HST, alternative = c("two.sided", "less", "greater"))
G <- wmwTest(covid_data$AST, non_covid_data$AST, alternative = c("two.sided", "less", "greater"))
J <- wmwTest(covid_data$percentage_points_away, non_covid_data$percentage_points_away, alternative = c("two.sided", "less", "greater"))
XD <- wmwTest(covid_data$xg2, covid_data$xg1, alternative = c("two.sided", "less", "greater"))
H <- wmwTest(covid_data$xg1, non_covid_data$xg2, alternative = c("two.sided", "less", "greater"))
I <- wmwTest(covid_data$xg2, non_covid_data$xg2, alternative = c("two.sided", "less", "greater"))
l <- t.test(covid_data$xg1, non_covid_data$HG, paired = FALSE)
x<- pander(l)
l <- t.test(non_covid_data$xg1, non_covid_data$HG, paired = FALSE)
x<- pander(l)
x<- pander(A)
x<- pander(B)
x<- pander(C)
x<- pander(D)
x<- pander(E)
x<- pander(G)
x<- pander(J)
prop.test(x = c(1014, 1210), n = c(1539, 2334),
alternative = "two.sided")
x<- pander(R)
x<- pander(M)
x<- pander(N)
x<- pander(O)
x<- pander(P)
x<- pander(Q)
x<- pander(S)
x<- pander(t)
x<- pander(U)
x<- pander(V)
x<- pander(W)
x<- pander(X)
x<- pander(Y)
x<- pander(Z)
H <- wmwTest(covid_data$xg1, non_covid_data$xg1, alternative = c("two.sided", "less", "greater"))
I <- wmwTest(covid_data$xg2, non_covid_data$xg2, alternative = c("two.sided", "less", "greater"))
x<- pander(H)
x<- pander(I)
